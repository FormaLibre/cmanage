// Code generated by go-bindata.
// sources:
// data/deploy.sh
// data/docker-compose.yml
// DO NOT EDIT!

package bin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDeploySh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x93\x4d\x6f\x13\x31\x10\x86\xef\xfe\x15\x2f\xcb\xaa\x1f\x07\x67\x2b\xf5\x10\x29\x12\x87\x20\x84\x84\x44\x29\xa2\x70\x01\x41\x35\xf1\xce\xee\x5a\xf5\xda\xc6\xe3\x2d\xad\x28\xff\x1d\x2d\xd9\x24\x48\x4d\xae\xb9\x79\xfc\x8c\xf4\xcc\xbc\x96\x5f\xbe\xa8\x56\xd6\x57\x2b\x92\x4e\x99\xae\x0f\x35\xe6\xf3\x39\x8c\xa3\x14\x9c\xf5\x5c\x51\x8c\x95\x21\xd3\xf1\x61\x1a\x7c\x63\xdb\x83\xd8\x85\x56\x0e\x42\x61\x11\x1b\xfc\xfe\x86\x5f\xbc\xaa\x86\xe8\x02\xd5\xfb\x79\x63\x1d\x8b\x52\x75\x30\x77\x9c\x10\x07\xe7\xfe\x83\xdb\x93\x5e\xf3\x45\x4c\xa1\x56\x4a\xc2\x90\x0c\x63\xc6\xfe\x5e\xb1\xbf\x47\x79\x66\x28\xff\x2b\xf1\x84\x36\x71\xc4\x8f\x6f\x4b\xfd\xf5\x3b\x9e\xf0\x40\xa9\x95\x73\x8c\xc9\x40\x1b\x9c\x4e\x1e\xc9\x64\xee\x50\x73\x74\xe1\x11\x5a\x9b\xd0\xc7\x20\xac\xc7\x61\xb0\x6e\xd9\xdc\xcd\x1e\x7b\x87\xf2\xe3\xfb\xe5\xe7\xb7\xd7\x9f\xae\x6e\x6f\xbe\xbc\x7e\x73\x7d\xb5\x7c\xf7\xe1\x54\xb1\xe9\x02\x8a\x1b\xc7\x1c\xad\x6f\x71\x79\x21\x85\x92\xb1\xc2\xe5\xc5\x76\x21\x7e\x60\x03\x6d\x33\xca\xb3\xcd\x8a\x02\xfd\x13\x7a\x74\x65\x4e\xf0\xd4\xf3\xab\xf2\xf7\x73\xc1\x9f\xdb\xed\xf6\xe7\x58\x4f\x5f\x98\x7a\x17\x0e\x4e\x4e\x10\xbb\x08\x31\xc9\xc6\x2c\xd3\x0b\x0e\x89\x67\xb1\x8b\xc5\x71\xfc\x53\x46\x09\xd6\x4b\x26\xe7\x8e\xad\x6d\x48\xb2\x3e\xae\x7b\x8c\x7c\xfa\x30\x12\x1c\xef\xe0\x62\x10\x4e\x0b\x93\x98\x32\x43\x13\x1a\x9b\x24\xc3\x91\x64\x8c\x04\x91\x44\xc0\x3d\x59\x57\xa8\xbf\x01\x00\x00\xff\xff\x40\x15\x3f\x6c\xb0\x03\x00\x00")

func dataDeployShBytes() ([]byte, error) {
	return bindataRead(
		_dataDeploySh,
		"data/deploy.sh",
	)
}

func dataDeploySh() (*asset, error) {
	bytes, err := dataDeployShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/deploy.sh", size: 944, mode: os.FileMode(493), modTime: time.Unix(1489220787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x4f\x6b\x83\x40\x10\xc5\xef\x7e\x8a\x41\x7a\x8d\x16\x7a\x29\x7b\x33\x8d\x25\x85\x26\x06\x4d\xe8\x51\x36\x3a\x49\xc5\xfd\x23\xe3\x46\x13\x4a\xbf\x7b\xf1\x5f\x5c\x48\x6f\xef\xed\xef\xcd\xf0\x96\x69\x90\xea\x42\x2b\x06\xee\x8b\xeb\xd4\x48\x4d\x91\x61\xcd\x1c\x80\x4c\x70\xd2\xa2\x50\xd8\x19\x80\x42\xf2\x33\xb2\xf9\xd5\xbf\xab\x45\xae\xb3\x12\x89\x55\xa4\xf3\x3e\x9a\x63\x25\xf4\x6d\x18\x03\x10\xfc\x88\xa2\x9e\x1c\x80\x21\x8e\xa7\xa2\xf4\x2a\x4d\x86\xc1\xeb\xf3\x03\x38\xf2\xac\x44\x95\x33\x78\xfa\xd9\x7d\x06\xfb\xf7\x28\xde\xa4\xc9\x61\xb9\x8a\x36\xc1\xc7\xf6\xf7\x21\x7e\x22\xad\x0c\xaa\xdc\xa3\x8b\x40\x06\x6b\x5d\x1b\xf6\xef\xa4\x67\xbd\xda\xcb\x14\x9a\x56\x53\x79\xaf\xb8\x80\x8a\xf4\xf5\xd6\x3b\x54\x4d\x41\x5a\x49\x54\x66\xc2\x49\xf8\x16\x87\xfb\xae\xdd\xa0\xa6\x46\xab\x65\xba\x8e\x92\x1e\x8c\xd2\x22\x87\x24\x8c\x47\xd2\x49\x8b\x6c\x83\x4d\x38\x92\x4e\x5a\x64\x17\x24\xc9\x57\x14\xaf\x46\x3a\xd9\x21\xd1\x68\x71\x91\x68\x75\x76\xbd\xf9\x22\x3e\xf3\x1b\x4e\x7e\xdb\xb6\xfe\xb7\x91\x62\x06\xae\x63\x7f\xb6\xff\xe6\xb0\x01\xaf\x06\x49\x71\x31\xed\x53\x5c\x76\xc7\x96\x5c\xf1\x33\x52\xda\x27\xd3\x71\xd6\xf9\x0b\x00\x00\xff\xff\xed\xdc\x49\x87\x33\x02\x00\x00")

func dataDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerComposeYml,
		"data/docker-compose.yml",
	)
}

func dataDockerComposeYml() (*asset, error) {
	bytes, err := dataDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/docker-compose.yml", size: 563, mode: os.FileMode(420), modTime: time.Unix(1490127929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/deploy.sh": dataDeploySh,
	"data/docker-compose.yml": dataDockerComposeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"deploy.sh": &bintree{dataDeploySh, map[string]*bintree{}},
		"docker-compose.yml": &bintree{dataDockerComposeYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
