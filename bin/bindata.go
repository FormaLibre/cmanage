// Code generated by go-bindata.
// sources:
// data/deploy.sh
// data/docker-compose.yml
// DO NOT EDIT!

package bin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDeploySh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x93\xcf\x6e\x13\x31\x10\x87\xef\x7e\x8a\x1f\x4b\xd4\x3f\x07\x67\x2b\xf5\x10\xa9\x12\x87\x20\x84\x84\x44\x29\xa2\x70\x81\x40\xe4\xd8\xb3\xbb\x56\xbd\xf6\xe0\xf1\x96\x56\x94\x77\x47\x4b\xd2\x00\x22\x39\x92\xdb\xce\x7c\x23\x7d\x33\xb3\x9e\xa7\x4f\xea\x95\x8f\xf5\xca\x48\xa7\x6c\xd7\x27\x87\xd9\x6c\x06\x1b\x4c\x4e\xc1\x47\xaa\x0d\x73\x6d\x8d\xed\x68\x3f\x4d\xb1\xf1\xed\x5e\x1c\x52\x2b\x7b\xa1\x90\x88\x4f\x71\x77\xc1\x37\x5a\xd5\x03\x87\x64\xdc\x6e\xde\xf8\x40\xa2\x94\x4b\xf6\x86\x32\x78\x08\xe1\x0f\xb8\xfd\xd2\x6b\x7e\xc1\x39\x39\xa5\x24\x0d\xd9\x12\xa6\x14\x6f\x15\xc5\x5b\x4c\x4e\xac\x29\xbf\x42\x3c\xa0\xcd\xc4\xf8\xf2\x69\xae\x3f\x7e\xc6\x03\xee\x4c\x6e\xe5\x14\xe3\x66\xa0\x2d\x8e\x37\x1e\x29\xc6\xde\xc0\x11\x87\x74\x0f\xad\x6d\xea\x39\x09\xe9\xb1\x19\xac\x4b\x1e\x73\xd3\xfb\x3e\x60\xf2\xf6\xf5\xfc\xfd\xcb\xab\x77\x97\xcb\xeb\x0f\xcf\x5f\x5c\x5d\xce\x5f\xbd\x39\x56\x64\xbb\x84\xea\x3a\x10\xb1\x8f\x2d\xce\xcf\xa4\x52\x32\x46\x38\x3f\xdb\x0e\x44\x77\x64\xa1\x7d\xc1\xe4\xe4\x71\x44\x81\xfe\x0a\x3d\xba\x0a\x65\x44\xd3\xd3\xb3\xc9\xf7\x7f\x05\x3f\x96\xdb\xe9\x4f\xb1\xee\xbe\xb2\xee\xf7\x72\x70\x74\x04\xee\x18\x62\xb3\xe7\x22\x9b\x3f\x38\x64\x9a\x72\xc7\xd5\x61\xfc\x9b\x1d\x65\xf8\x28\xc5\x84\x70\x68\x6d\x63\xa4\xe8\xff\xeb\x16\x72\xd0\x1e\x8b\xaa\x16\x09\x4b\x8a\x66\x15\xc8\x5d\xa0\x31\x41\xa8\xb6\x8b\xbf\x92\x25\x0f\xb4\xa8\x76\x5e\x56\xcd\xc1\x94\x26\xe5\x7e\x99\xb8\x8c\xc7\x32\xbe\xab\x4a\xfd\x0c\x00\x00\xff\xff\x1f\xe8\xef\x98\xb9\x03\x00\x00")

func dataDeployShBytes() ([]byte, error) {
	return bindataRead(
		_dataDeploySh,
		"data/deploy.sh",
	)
}

func dataDeploySh() (*asset, error) {
	bytes, err := dataDeployShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/deploy.sh", size: 953, mode: os.FileMode(493), modTime: time.Unix(1493124828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x4f\x6b\x83\x40\x10\xc5\xef\x7e\x8a\x41\x7a\x8d\x16\x7a\x29\x7b\x33\x8d\x25\x85\x26\x06\x4d\xe8\x51\x36\x3a\x49\xc5\xfd\x23\xe3\x46\x13\x4a\xbf\x7b\xf1\x5f\x5c\x48\x6f\xef\xed\xef\xcd\xf0\x96\x69\x90\xea\x42\x2b\x06\xee\x8b\xeb\xd4\x48\x4d\x91\x61\xcd\x1c\x80\x4c\x70\xd2\xa2\x50\xd8\x19\x80\x42\xf2\x33\xb2\xf9\xd5\xbf\xab\x45\xae\xb3\x12\x89\x55\xa4\xf3\x3e\x9a\x63\x25\xf4\x6d\x18\x03\x10\xfc\x88\xa2\x9e\x1c\x80\x21\x8e\xa7\xa2\xf4\x2a\x4d\x86\xc1\xeb\xf3\x03\x38\xf2\xac\x44\x95\x33\x78\xfa\xd9\x7d\x06\xfb\xf7\x28\xde\xa4\xc9\x61\xb9\x8a\x36\xc1\xc7\xf6\xf7\x21\x7e\x22\xad\x0c\xaa\xdc\xa3\x8b\x40\x06\x6b\x5d\x1b\xf6\xef\xa4\x67\xbd\xda\xcb\x14\x9a\x56\x53\x79\xaf\xb8\x80\x8a\xf4\xf5\xd6\x3b\x54\x4d\x41\x5a\x49\x54\x66\xc2\x49\xf8\x16\x87\xfb\xae\xdd\xa0\xa6\x46\xab\x65\xba\x8e\x92\x1e\x8c\xd2\x22\x87\x24\x8c\x47\xd2\x49\x8b\x6c\x83\x4d\x38\x92\x4e\x5a\x64\x17\x24\xc9\x57\x14\xaf\x46\x3a\xd9\x21\xd1\x68\x71\x91\x68\x75\x76\xbd\xf9\x22\x3e\xf3\x1b\x4e\x7e\xdb\xb6\xfe\xb7\x91\x62\x06\xae\x63\x7f\xb6\xff\xe6\xb0\x01\xaf\x06\x49\x71\x31\xed\x53\x5c\x76\xc7\x96\x5c\xf1\x33\x52\xda\x27\xd3\x71\xd6\xf9\x0b\x00\x00\xff\xff\xed\xdc\x49\x87\x33\x02\x00\x00")

func dataDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerComposeYml,
		"data/docker-compose.yml",
	)
}

func dataDockerComposeYml() (*asset, error) {
	bytes, err := dataDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/docker-compose.yml", size: 563, mode: os.FileMode(420), modTime: time.Unix(1490355089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/deploy.sh": dataDeploySh,
	"data/docker-compose.yml": dataDockerComposeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"deploy.sh": &bintree{dataDeploySh, map[string]*bintree{}},
		"docker-compose.yml": &bintree{dataDockerComposeYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
